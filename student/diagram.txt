@startuml
class BaseStudent {
  +{static} validate_git(git)
  +{static} valid_id(id)
  +id
  +git
  +initialize(id:, git: nil)
  +id=(id)
  +validate?()
  +has_contact?()
  +has_git?()
  #git=(git)
}

class Student {
  +{static} create_from_string(string)
  +{static} validate_fio(name)
  +{static} validate_phone(phone)
  +{static} validate_email(email)
  +{static} validate_telegram(telegram)
  +surname
  +name
  +patronymic
  +birth_date
  +initialize(surname:, name:, patronymic:, birth_date:, id: nil, phone: nil, email: nil, git: nil, telegram: nil)
  +birth_date=(birth_date)
  +get_contact()
  +has_contact?()
  +set_contacts(phone: nil, telegram: nil, email: nil)
  +get_info()
  +name=(name)
  +surname=(surname)
  +patronymic=(patronymic)
  #phone=(phone)
  #email=(email)
  #telegram=(telegram)
}

class Student_short {
  +{static} create_from_student(student)
  +def == (other)
  +{static} create_from_string(string)
  +surname_initials
  +contact
  +to_s()
  +to_h()
  +has_contact?()
  +surname_initials=(value)
  -initialize(id:, git:, surname_initials:, contact: nil)
}

class StudentTree {
  +add(student)
  +each(&block)
  -add_recursive(node, student)
  -traverse_in_order(node, &block)
}

class StudentsListBase {
  +file_path
  +initialize(file_path, strategy)
  +read_all()
  +write_all()
  +get_student_by_id(id)
  +get_k_n_student_short_list(k, n, data_list = nil)
  +sort_by_name()
  +add_student(student)
  +update_student(id, updated_student)
  +delete_student(id)
  +get_student_count()
  -parse_file(file_path)
  -save_to_file(file_path, data)
}

class StudentListStrategy {
  +parse_file(file_path)
  +save_to_file(file_path, data)
}

class StudentsListJSON {
  +parse_file(file_path)
  +save_to_file(file_path, data)
}

class StudentsListYAML {
  +parse_file(file_path)
  +save_to_file(file_path, data)
}

class DataList {
  +initialize(objects)
  +select(number)
  +get_selected()
  +get_names()
  +get_data()
  #generate_row_number(index)
  #extract_attributes(object)
  #names()
}

class DataListStudentShort {
  -generate_row_number(index)
  -extract_attributes(object)
  -names()
}

class DataTable {
  +initialize(data)
  +get_element(row, col)
  +row_count()
  +column_count()
}

class FileStrategy {
  +read(file_path)
  +write(file_path, data)
}

class JSONStrategy {
  +read(file_path)
  +write(file_path, data)
}

class YAMLStrategy {
  +read(file_path)
  +write(file_path, data)
}

class StudentsFileHandler {
  +strategy
  +initialize(strategy)
  +read(file_path)
  +write(file_path, data)
}

class DatabaseConnection {
  +{static} instance()
  +initialize()
  +query(sql)
  +execute(sql)
  -{static} new()
}

class StudentsListDB {
  +initialize(db_connection)
  +get_student_by_id(id)
  +get_k_n_student_short_list(k, n)
  +add_student(student)
  +update_student(id, updated_student)
  +delete_student(id)
  +get_student_count()
}

BaseStudent <|-- Student
BaseStudent <|-- Student_short
StudentsListBase o-- StudentListStrategy
StudentListStrategy <|-- StudentsListJSON
StudentListStrategy <|-- StudentsListYAML
FileStrategy <|-- JSONStrategy
FileStrategy <|-- YAMLStrategy
DataList <|-- DataListStudentShort

StudentTree o-- Student
StudentsListBase o-- Student_short
DataList *-- DataTable
StudentsFileHandler *-- FileStrategy

StudentsListBase --> Student_short : uses
StudentsListJSON --> DataListStudentShort : uses
StudentsListYAML --> DataListStudentShort : uses
StudentTree --> Student : manages
StudentsFileHandler --> FileStrategy : strategy

StudentsListDB --> DatabaseConnection : uses
StudentsListDB --> Student : uses
@enduml

https://www.plantuml.com/plantuml/uml/lLPVRzms37_tfp0GOD0jyHS8vgthYc4OkkqXVTcJ85lCdHPPIYKvVzRrkq-YvMDj-O862VfmjYXIFv8_KlIzyK6uC0wwwhNmlduhF5o5KO89zQUghiy_HOEW-i_rdT1AYW1yhmABlrsfvKeo9L6XP7f6CnIC2YeQ_0jHVNbHn-tBsYYTBTlvqEpY9uRYGNZUMnD47sWdki_IMLorKoIVgnp-TkYzWnJujRC3zy4fisVJQoC7D5IM6J702VNjmHfW-3nX0ODGck7pX4K03Nid1ZOlqCwFBlbDo_bzAuApvd5GVP8wvSA19uGLh_ba93U_w5mKw5WKb4JoeqdA8AynrhoEbERL71nLYv1QHcjKxI7CvJfLFqycdf5xSbH4SqHMvjeY23BJvleGP-rCmMx9MijeZLs3RbigtnawQwbQPtCmBHMdw33k3zOztMTen_8Rev9mNRTjpMmuWDizeqLpQZmNtAUzp6DQ1iizs-NLOPly4gHbiHj7vA3PkA7nkJuHjp8argPavOC3c3WHKYvI1z4Vs7UTjlqDEenwxg0VdLTtm8oL4DsHVHESk0FdaszkdGINRJ94uTc_Lpx4uPNTNoiDF1R-iBecn_tapOa0-qSCpu6GN6ZDKBftAa0MS_lbs7ZtI4CE5JVSP6Nk2QwL3-mcNiIBMeeWKAxROpDxwn0cCSjscQlDTXblSLJCAYKlwcbhCgUkqh0mAuBkxHWLoEkjIAGc6eWBLFZ8DmzsfPfIAEbER5zb0YV6Jm6VFmyOw_ZxrLz_lZxgtp__yVvrKDz5CI56j6LxsUuVw8FFiqx7DJFZq86Zak0kIEgir0UUnEGgVzx0G6AOEtlF9nYcZ8G7rC93SA8FN8JWL3S6yDaxQZDe6N8cvEeulPedtJHFkcastNmGdOQ26gHmJX8q3AbNeyiqKZGgad_grFEuFGvctY4NloeDr7hpvQLgqGr-eeAfmruCaXhgXI3KeIcjtuIH6jo4vJFoYaSQMy_rHnNgX8TVh37G1sNDwYEcJ5oP7bP-4VpZ2EwH-OyQ9NY0VWmmoyqHmi3zzXLyzxRiYuxtnr1UD6w_vIn5Gh_yh_p3Vqqpfxgfe8YhufDbqQGOhDN67k8Lm_BhB5E_LdHziidYBfJgHPTNynX1rUPGgIhwBx38x6JQn0p1VzyqD4kgZJk25by6MvNuJVFZ4h--h4SFlbhJXvP5CiK1Ol5h3o0754PI3yA8FVZDdABb8gTexilqy1wXRNcNoNzXdBTcYpTWv3Ze_m40